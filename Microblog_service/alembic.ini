# A generic, single database configuration.

[alembic]
# Path to migration scripts
# Use forward slashes (/) also on windows to provide an os agnostic path
script_location = migrations

# Template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# Example: %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory
prepend_sys_path = .

# Timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires python>=3.9 or backports.zoneinfo library
# For Moscow time, you can use:
# timezone = Europe/Moscow
# If you prefer localtime, leave the field blank:
# timezone =

# Maximum length of characters to apply to the "slug" field if needed
# truncate_slug_length = 40

# Set to 'true' to run the environment during the 'revision' command, regardless of autogenerate
# revision_environment = false

# Set to 'true' to allow .pyc and .pyo files without source .py files to be detected as revisions
# in the versions/ directory
# sourceless = false

# Version location specification
# By default, it's migrations/versions. If you use multiple version directories, initial revisions must be specified with --version-path
# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions

# Version path separator; uses os.pathsep by default, which is a good practice for all platforms
version_path_separator = os  # Uses os.pathsep. This is the default.

# Set to 'true' to search source files recursively in each "version_locations" directory
# recursive_version_locations = false

# The output encoding used when revision files are written from script.py.mako
output_encoding = utf-8

# Update the database connection URL below:
# Make sure you replace `yourpassword` with your password and `mydatabase` with your database name
sqlalchemy.url = postgresql+psycopg2://postgres:yourpassword@localhost/mydatabase

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run on newly generated revision scripts
# For example, you can use black for automatic code formatting:
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# Or use ruff for linting and auto-fixing:
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
